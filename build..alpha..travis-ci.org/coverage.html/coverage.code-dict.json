{"/home/travis/build/npmtest/node-npmtest-swaggerize-express/test.js":"/* istanbul instrument in package npmtest_swaggerize_express */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-swaggerize-express/lib.npmtest_swaggerize_express.js":"/* istanbul instrument in package npmtest_swaggerize_express */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_swaggerize_express = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_swaggerize_express = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-swaggerize-express/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-swaggerize-express && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_swaggerize_express */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_swaggerize_express\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_swaggerize_express.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_swaggerize_express.rollup.js'] =\n            local.assetsDict['/assets.npmtest_swaggerize_express.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_swaggerize_express.__dirname + '/lib.npmtest_swaggerize_express.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-swaggerize-express/node_modules/swaggerize-express/lib/index.js":"'use strict';\n\nvar assert = require('assert'),\n    express = require('express'),\n    thing = require('core-util-is'),\n    path = require('path'),\n    caller = require('caller'),\n    expressroutes = require('./expressroutes'),\n    url = require('url'),\n    routes = require('swaggerize-routes'),\n    yaml = require('js-yaml'),\n    fs = require('fs');\n\nfunction swaggerize(options) {\n    var app;\n\n    assert.ok(thing.isObject(options), 'Expected options to be an object.');\n    assert.ok(options.api, 'Expected an api definition.');\n\n    if (thing.isString(options.api)) {\n        options.api = loadApi(options.api);\n    }\n\n    options.express = options.express || {};\n    options.basedir = options.basedir || path.dirname(caller());\n\n    assert.ok(!options.express || thing.isObject(options.express), 'Expected express options to be an object.');\n    assert.ok(thing.isObject(options.api), 'Api definition must resolve to an object.');\n\n    options.routes = routes(options);\n\n    app = express();\n\n    app.once('mount', mount(app, options));\n\n    return app;\n}\n\n/**\n * Onmount handler.\n * @param options\n * @returns {onmount}\n */\nfunction mount(app, options) {\n\n    return function onmount(parent) {\n        var settings;\n\n        parent._router.stack.pop();\n\n        //If a mountpath was provided, override basePath in api.\n        options.api.basePath = app.mountpath !== '/' ? app.mountpath : options.api.basePath;\n\n        Object.keys(settings = {\n            'x-powered-by': false,\n            'trust proxy': false,\n            'jsonp callback name': null,\n            'json replacer': null,\n            'json spaces': 0,\n            'case sensitive routing': false,\n            'strict routing': false,\n            'views': null,\n            'view cache': false,\n            'view engine': false\n        }).forEach(function (option) {\n            parent.set(option, settings[option]);\n        });\n\n        Object.keys(options.express).forEach(function (option) {\n            parent.set(option, options.express[option]);\n        });\n\n        parent.mountpath = options.api.basePath;\n\n        Object.defineProperty(parent, 'swagger', {\n            value: {\n                api: options.api,\n                routes: options.routes\n            }\n        });\n\n        expressroutes(parent._router, options);\n    };\n}\n\n/**\n * Loads the api from a path, with support for yaml..\n * @param apiPath\n * @returns {Object}\n */\nfunction loadApi(apiPath) {\n    if (apiPath.indexOf('.yaml') === apiPath.length - 5 || apiPath.indexOf('.yml') === apiPath.length - 4) {\n        return yaml.load(fs.readFileSync(apiPath));\n    }\n    return require(apiPath);\n}\n\nmodule.exports = swaggerize;\n","/home/travis/build/npmtest/node-npmtest-swaggerize-express/node_modules/swaggerize-express/lib/expressroutes.js":"'use strict';\n\nvar async = require('async'),\n    path = require('path'),\n    thing = require('core-util-is'),\n    utils = require('swaggerize-routes/lib/utils');\n\n\n/**\n * Makes default accessor functions for a specific data location, e.g. query, params etc\n * @param dataLoc\n * @returns {{get: get, set: set}}\n */\nfunction defaultAccessor(dataLoc) {\n    return {\n        get: function(req, key) {\n            return req[dataLoc][key];\n        },\n        set: function(req, key, val) {\n            req[dataLoc][key] = val;\n        }\n    };\n}\n\nfunction valueAccessor(param, consumes) {\n    if (param.in === 'path') {\n        return defaultAccessor('params');\n    }\n    if (param.in === 'query') {\n        return defaultAccessor('query');\n    }\n    if (param.in === 'header') {\n        return {\n            get: function(req, key) {\n                return req.header(key);\n            },\n            set: function(req, key) {\n              // noop\n            }\n        };\n    }\n    if (param.in === 'body') {\n        return {\n            get: function(req) {\n                return req.body;\n            },\n            set: function(req, key, val) {\n                req.body = val;\n            }\n        };\n    }\n    if (param.in === 'formData') {\n        return {\n            get: function(req, key) {\n                return req.body[key];\n            },\n            set: function(req, key, val) {\n                req.body[key] = param.type === 'file' ? val.value : val;\n            }\n        };\n    }\n}\n\n\n/**\n * Makes a validator function, to validate data input per the Swagger API spec.\n * @param {{}} validator\n * @returns {function}\n */\nfunction makeValidator(validator, consumes) {\n    var parameter, validate;\n\n    parameter = validator.parameter;\n    validate = validator.validate;\n\n    function validateInput(req, res, next) {\n        var accessor, value;\n\n        accessor = valueAccessor(parameter, consumes);\n        value = accessor.get(req, parameter.name);\n\n        validate(value, function (error, newvalue) {\n            if (error) {\n                error.status = 400;\n                next(error);\n                return;\n            }\n\n            accessor.set(req, parameter.name, newvalue);\n            next();\n        });\n    }\n\n    return validateInput;\n}\n\n\n/**\n * Creates a new Express route and adds it to the router.\n * @param router\n * @param mountpath\n * @param routeSpec\n */\nfunction makeExpressRoute(router, mountpath, route) {\n    var path, args, before, validators;\n\n    path = route.path.replace(/{([^}]+)}/g, ':$1');\n    args = [mountpath + utils.prefix(path, '/')];\n    before = [];\n\n    if (route.security) {\n        before.push(authorizeFor(route.security));\n    }\n\n    validators = [];\n\n    for (var i = 0; i < route.validators.length; ++i) {\n        validators.push(makeValidator(route.validators[i], route.consumes));\n    }\n\n    before = before.concat(validators);\n\n    if (thing.isArray(route.handler)) {\n        if (route.handler.length > 1) {\n            Array.prototype.push.apply(before, route.handler.slice(0, route.handler.length - 1));\n        }\n        route.handler = route.handler[route.handler.length - 1];\n    }\n\n    Array.prototype.push.apply(args, before);\n    args.push(route.handler);\n    router[route.method].apply(router, args);\n}\n\n\n/**\n * Routes handlers to express router.\n * @param router\n * @param mountpath\n * @param options\n */\nfunction expressroutes(router, options) {\n    var routes, mountpath;\n\n    routes = options.routes || [];\n    options.docspath = utils.prefix(options.docspath || '/api-docs', '/');\n    options.api.basePath = utils.prefix(options.api.basePath || '/', '/');\n    mountpath = utils.unsuffix(options.api.basePath, '/');\n\n    router.get(mountpath + options.docspath, function (req, res) {\n        res.json(options.api);\n    });\n\n    routes.forEach(function(route) {\n        makeExpressRoute(router, mountpath, route);\n    });\n}\n\n\nfunction authorizeFor(security) {\n\n    return function authorize(req, res, next) {\n        var errors = [];\n\n        function passed(type, pass) {\n            if (thing.isFunction(security[type].authorize)) {\n                req.requiredScopes = security[type].scopes;\n\n                security[type].authorize(req, res, function (error) {\n                    if (error) {\n                        errors.push(error);\n                        pass(false);\n                        return;\n                    }\n                    pass(true);\n                });\n\n                return;\n            }\n\n            res.statusCode = 401;\n            errors.push(new Error('Unauthorized.'));\n            pass(false);\n        }\n\n        function done(success) {\n            if (!success) {\n                next(errors.shift());\n                return;\n            }\n            next();\n        }\n\n        async.some(Object.keys(security), passed, done);\n    };\n}\n\nmodule.exports = expressroutes;\n"}